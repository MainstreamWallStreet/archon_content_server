#!/bin/bash

# Local Development Setup Script for Zergling FastAPI Server
# This script helps set up the local development environment

set -e

echo "üöÄ Setting up local development environment for Zergling FastAPI Server"
echo ""

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo "‚ùå gcloud CLI is not installed. Please install it first:"
    echo "   https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Check if user is authenticated
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    echo "‚ùå You are not authenticated with gcloud. Please run:"
    echo "   gcloud auth login"
    exit 1
fi

# Get current project
PROJECT_ID=$(gcloud config get-value project 2>/dev/null || echo "")
if [ -z "$PROJECT_ID" ]; then
    echo "‚ùå No GCP project is set. Please run:"
    echo "   gcloud config set project YOUR_PROJECT_ID"
    exit 1
fi

echo "‚úÖ Using GCP project: $PROJECT_ID"

# Check if infrastructure is deployed
echo "üîç Checking if infrastructure is deployed..."
cd infra

if [ ! -f ".terraform/terraform.tfstate" ]; then
    echo "‚ùå Terraform state not found. Please run infrastructure setup first:"
    echo "   cd infra"
    echo "   terraform init"
    echo "   terraform plan"
    echo "   terraform apply"
    exit 1
fi

# Get bucket name from terraform output
BUCKET_NAME=$(terraform output -raw zergling_data_bucket 2>/dev/null || echo "")
if [ -z "$BUCKET_NAME" ]; then
    echo "‚ùå Could not get bucket name from Terraform output."
    echo "   Please ensure infrastructure is deployed and terraform output is available."
    exit 1
fi

echo "‚úÖ Found bucket: $BUCKET_NAME"

cd ..

# Create credentials directory
CREDS_DIR="$HOME/.config/gcp"
mkdir -p "$CREDS_DIR"

# Check if service account key already exists
SA_KEY_FILE="$CREDS_DIR/zergling-sa.json"
if [ -f "$SA_KEY_FILE" ]; then
    echo "‚úÖ Service account key already exists at: $SA_KEY_FILE"
else
    echo "üì• Downloading service account key..."
    gcloud iam service-accounts keys create "$SA_KEY_FILE" \
        --iam-account="cloud-run-zergling-sa@$PROJECT_ID.iam.gserviceaccount.com"
    echo "‚úÖ Service account key downloaded to: $SA_KEY_FILE"
fi

# Generate a random API key if not provided
if [ -z "$ZERGLING_API_KEY" ]; then
    ZERGLING_API_KEY=$(openssl rand -hex 32)
    echo "üîë Generated API key: $ZERGLING_API_KEY"
    echo "   (You can set ZERGLING_API_KEY environment variable to use a custom key)"
fi

# Create .env file
echo "üìù Creating .env file..."
cat > .env << EOF
# ==============================================================================
# Zergling FastAPI Server Environment Variables
# Generated by setup_local_dev.sh
# ==============================================================================

# --- Application Settings ---
APP_NAME="zergling"
LOG_LEVEL="INFO"
DEBUG=false
ENV="dev"

# --- Authentication ---
ZERGLING_API_KEY="$ZERGLING_API_KEY"

# --- Google Cloud Platform ---
GOOGLE_CLOUD_PROJECT="$PROJECT_ID"
EXAMPLE_BUCKET="$BUCKET_NAME"

# --- Local Development Only ---
GOOGLE_APPLICATION_CREDENTIALS="$SA_KEY_FILE"
EOF

echo "‚úÖ .env file created successfully!"

# Test the setup
echo ""
echo "üß™ Testing the setup..."
if python -c "from google.cloud import storage; client = storage.Client(); print('‚úÖ GCP authentication working')" 2>/dev/null; then
    echo "‚úÖ GCP authentication test passed!"
else
    echo "‚ùå GCP authentication test failed. Please check your setup."
    exit 1
fi

echo ""
echo "üéâ Local development environment setup complete!"
echo ""
echo "Next steps:"
echo "1. Start the development server: python run.py"
echo "2. Test the API: curl http://localhost:8080/health"
echo "3. View documentation: http://localhost:8080/docs"
echo ""
echo "Your API key is: $ZERGLING_API_KEY"
echo "Use this key in the X-API-Key header for API requests." 