name: PR Test

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    permissions:
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Auto-format code with Black
        run: |
          pip install black
          black src/ tests/

      - name: Auto-format imports with isort
        run: |
          pip install isort
          isort src/ tests/

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 src/ tests/ --config=.flake8
          black --check src/ tests/
          isort --check-only src/ tests/
          
      - name: Run tests
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Comment PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Test Results')
            );
            
            const testStatus = '${{ job.status }}';
            const emoji = testStatus === 'success' ? '✅' : '❌';
            const statusText = testStatus === 'success' ? 'PASSED' : 'FAILED';
            
            const commentBody = `## Test Results ${emoji}
            
            **Status:** ${statusText}
            **Branch:** \`${{ github.head_ref }}\`
            **Commit:** \`${{ github.sha }}\`
            **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${testStatus === 'success' ? 
              '✅ All tests passed! This PR is ready for review and merge.' :
              '❌ Tests failed. Please fix the issues before merging.'
            }
            
            ---
            *This comment was automatically generated by GitHub Actions.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } 