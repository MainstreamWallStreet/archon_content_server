name: Deploy to Production

on:
  push:
    branches: [main]

env:
  PROJECT_ID: mainstreamwallstreet
  REGION: us-central1
  SERVICE_NAME: archon-content-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and Deploy
        id: build-deploy
        run: |
          echo "üöÄ Starting deployment..."
          
          # Submit build to Cloud Build
          echo "üî® Starting Cloud Build..."
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_REGION=${{ env.REGION }},_SERVICE=${{ env.SERVICE_NAME }} \
            .
          
          echo "‚úÖ Cloud Build completed successfully!"

      - name: Get Service URL
        id: service-url
        run: |
          echo "üåê Getting service URL..."
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "üåê Service URL: $URL"

      - name: Verify Deployment
        id: verify
        run: |
          echo "üè• Verifying deployment..."
          
          # Wait for Cloud Run service to be ready
          echo "‚è≥ Waiting for Cloud Run service to be ready..."
          sleep 30
          
          # Test health endpoint
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s "$URL/health" > /dev/null; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "   Health check failed (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Deployment Summary
        if: success()
        run: |
          echo "## üöÄ Deployment Summary"
          echo "**Status**: ‚úÖ Successfully deployed to production"
          echo "**Service**: ${{ env.SERVICE_NAME }}"
          echo "**Region**: ${{ env.REGION }}"
          echo "**URL**: ${{ steps.service-url.outputs.url }}"
          echo ""
          echo "**Deployment Steps**:"
          echo "- Cloud Build: ‚úÖ SUCCESS"
          echo "- Cloud Run Deployment: ‚úÖ SUCCESS"
          echo "- Health Check: ‚úÖ PASSED"

      - name: Failure Summary
        if: failure()
        run: |
          echo "## ‚ùå Deployment Failed"
          echo "**Service**: ${{ env.SERVICE_NAME }}"
          echo "**Region**: ${{ env.REGION }}"
          echo ""
          echo "**Failure Details**:"
          echo "- Cloud Build: ${{ steps.build-deploy.outcome == 'success' && '‚úÖ SUCCESS' || '‚ùå FAILED' }}"
          echo "- Cloud Run Deployment: ${{ steps.service-url.outcome == 'success' && '‚úÖ SUCCESS' || '‚ùå FAILED' }}"
          echo "- Health Check: ${{ steps.verify.outcome == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}"
          echo ""
          echo "**Next Steps**:"
          echo "1. Check the GitHub Actions logs for detailed error information"
          echo "2. Verify GCP service account permissions"
          echo "3. Check Cloud Build and Cloud Run logs in GCP Console"
          echo "4. Test deployment manually using \`./scripts/test_deployment.sh\`" 